{"ast":null,"code":"var _jsxFileName = \"/home/nakador/PFA/craftiny/src/components/Articles/CreateArticle/CreateArticle.js\";\nimport React from 'react';\nimport { Button, Input, Row, Col } from 'antd';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport './CreateArticle.css';\n\nconst CreateArticle = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Article title here\",\n    name: \"title\",\n    className: \"TitleInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, \"Save\"), /*#__PURE__*/React.createElement(CKEditor, {\n    editor: ClassicEditor,\n    data: \"<p>Hello from CKEditor 5!</p>\",\n    onInit: editor => {\n      // You can store the \"editor\" and use when it is needed.\n      console.log('<strong> Editor is ready to use! </strong>', editor);\n    },\n    onChange: (event, editor) => {\n      const data = editor.getData();\n      console.log({\n        event,\n        editor,\n        data\n      });\n    },\n    onBlur: (event, editor) => {\n      console.log('Blur.', editor);\n    },\n    onFocus: (event, editor) => {\n      console.log('Focus.', editor);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default CreateArticle;","map":{"version":3,"sources":["/home/nakador/PFA/craftiny/src/components/Articles/CreateArticle/CreateArticle.js"],"names":["React","Button","Input","Row","Col","CKEditor","ClassicEditor","CreateArticle","props","editor","console","log","event","data","getData"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,GAAvB,EAA4BC,GAA5B,QAAsC,MAAtC;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,aAAP,MAA0B,mCAA1B;AACA,OAAO,qBAAP;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAG7B,sBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAII,oBAAC,KAAD;AAAO,IAAA,WAAW,EAAC,oBAAnB;AAAwC,IAAA,IAAI,EAAC,OAA7C;AAAqD,IAAA,SAAS,EAAC,YAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAKI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI,oBAAC,QAAD;AACQ,IAAA,MAAM,EAAGF,aADjB;AAEQ,IAAA,IAAI,EAAC,+BAFb;AAGQ,IAAA,MAAM,EAAGG,MAAM,IAAI;AACf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAa,4CAAb,EAA2DF,MAA3D;AACH,KANT;AAOQ,IAAA,QAAQ,EAAG,CAAEG,KAAF,EAASH,MAAT,KAAqB;AAC5B,YAAMI,IAAI,GAAGJ,MAAM,CAACK,OAAP,EAAb;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAa;AAAEC,QAAAA,KAAF;AAASH,QAAAA,MAAT;AAAiBI,QAAAA;AAAjB,OAAb;AACH,KAVT;AAWQ,IAAA,MAAM,EAAG,CAAED,KAAF,EAASH,MAAT,KAAqB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAa,OAAb,EAAsBF,MAAtB;AACH,KAbT;AAcQ,IAAA,OAAO,EAAG,CAAEG,KAAF,EAASH,MAAT,KAAqB;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAb,EAAuBF,MAAvB;AACH,KAhBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,CADJ;AA2BH,CA9BD;;AAgCC,eAAeF,aAAf","sourcesContent":["import React from 'react';\nimport {Button, Input, Row, Col} from 'antd';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport './CreateArticle.css';\n\nconst CreateArticle = (props) => {\n\n\n    return(\n        <>\n            <Row>\n\n            </Row>\n            <Input placeholder=\"Article title here\" name=\"title\" className=\"TitleInput\"/>\n            <Button type=\"primary\">Save</Button>\n            <CKEditor\n                    editor={ ClassicEditor }\n                    data=\"<p>Hello from CKEditor 5!</p>\"\n                    onInit={ editor => {\n                        // You can store the \"editor\" and use when it is needed.\n                        console.log( '<strong> Editor is ready to use! </strong>', editor );\n                    } }\n                    onChange={ ( event, editor ) => {\n                        const data = editor.getData();\n                        console.log( { event, editor, data } );\n                    } }\n                    onBlur={ ( event, editor ) => {\n                        console.log( 'Blur.', editor );\n                    } }\n                    onFocus={ ( event, editor ) => {\n                        console.log( 'Focus.', editor );\n                    } }\n            />\n        </>\n    );\n}\n\n export default CreateArticle;"]},"metadata":{},"sourceType":"module"}